-- 3.1.) (vo Vaöej schÈme) OUTER JOIN
-- (a) Vytvorte tabuæku kontakty a pre dvoch ötudentov vloûte do tabuæky po 
-- jednom kontakte.

CREATE TABLE KONTAKTY 
(   ID          NUMBER(38)      NOT NULL,
    ROD_CISLO   CHAR(11)        NOT NULL,
    POPIS       VARCHAR2(10)    NOT NULL,
    KONTAKT     VARCHAR2(30)    NOT NULL
);

DESC KONTAKTY;

INSERT INTO KONTAKTY VALUES (1, '841106/3456', 'Mobil', '0903555450');
INSERT INTO KONTAKTY VALUES (1, '840312/7845', 'Mobil', '0904575490');

-- (b) V sqlplus vypÌöte zoznam ötudentov a ak maj˙ nejak˝ kontakt, tak ich 
-- vypÌöte aj s kontaktom

SELECT MENO, PRIEZVISKO, ROD_CISLO, POPIS, KONTAKT
FROM OS_UDAJE LEFT OUTER JOIN KONTAKTY USING (ROD_CISLO);
/

-- (c) Vytvorte package Student_package a implementujte metÛdu Vypis tak, aby 
-- vypÌsala ötudentom aj ich kontakt, ak nejak˝ maj˙.

CREATE OR REPLACE PACKAGE STUDENT_PACKAGE AS
    PROCEDURE VYPIS;
END STUDENT_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY STUDENT_PACKAGE AS
    PROCEDURE VYPIS IS
    REC_STUDENT RABEK2.OS_UDAJE%ROWTYPE;
    CURSOR CUR_STUDENTI IS 
        SELECT * FROM OS_UDAJE;
    REC_KONTAKT RABEK2.KONTAKTY%ROWTYPE;
    CURSOR CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
        SELECT * FROM KONTAKTY
        WHERE RC = ROD_CISLO;
    BEGIN
        FOR RECS IN CUR_STUDENTI LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END VYPIS;
END STUDENT_PACKAGE;
/

EXEC STUDENT_PACKAGE.VYPIS;
/

-- (d) AspoÚ jednÈmu ötudentovi vloûte viac kontaktov a upravte proced˙ru Vypis 
-- tak, aby vypÌsala ötudentom vöetky kontakty (kaûd˝ do novÈho riadku, ale 
-- meno, priezvisko ötudenta bude len raz).

INSERT INTO KONTAKTY VALUES (3, '841106/3456', 'Mail', 'eragon@gmail.com');
INSERT INTO KONTAKTY VALUES (4, '841106/3456', 'GitHub', 'CodeMaster223');

EXEC STUDENT_PACKAGE.VYPIS;
/

-- 3.2 Str·nkovanie Selectov
-- (a) Do vytvorenÈho package doplÚte metÛdu na str·nkovanie zoznamu ötudentov, 
-- priËom maxim·lny poËet ötudentov nech je 3.

CREATE OR REPLACE PACKAGE STUDENT_PACKAGE AS
    PROCEDURE VYPIS;
    PROCEDURE STRANKOVANY_VYPIS;
    C_VELKOST_STRANKY INTEGER := 3;
END STUDENT_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY STUDENT_PACKAGE AS
    PROCEDURE VYPIS IS
    CURSOR  CUR_STUDENTI IS 
                SELECT * FROM OS_UDAJE;
    CURSOR CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        FOR RECS IN CUR_STUDENTI LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END VYPIS;
    
    PROCEDURE STRANKOVANY_VYPIS IS
    CURSOR  CUR_STUDENTI(VELKOST_STRANKY INTEGER) IS 
                SELECT * FROM ( 
                    SELECT ROW_NUMBER() OVER(ORDER BY ROD_CISLO) AS RN, MENO, PRIEZVISKO, ROD_CISLO
                    FROM OS_UDAJE
                    )
                WHERE RN <= C_VELKOST_STRANKY;
    CURSOR  CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        FOR RECS IN CUR_STUDENTI(C_VELKOST_STRANKY) LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END STRANKOVANY_VYPIS;
END STUDENT_PACKAGE;
/

EXEC STUDENT_PACKAGE.STRANKOVANY_VYPIS;
/

-- (b) DoplÚte metÛdu na zÌskanie nasledovnej a predch·dzaj˙cej str·nky.

CREATE OR REPLACE PACKAGE STUDENT_PACKAGE AS
    PROCEDURE VYPIS;
    PROCEDURE STRANKOVANY_VYPIS;
    PROCEDURE DALSIA_STRANKA;
    PROCEDURE PREDCHADZAJUCA_STRANKA;
    C_CISLO_STRANKY INTEGER := 1;
    C_VELKOST_STRANKY INTEGER := 3;
END STUDENT_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY STUDENT_PACKAGE AS
    PROCEDURE VYPIS IS
    CURSOR  CUR_STUDENTI IS 
                SELECT * FROM OS_UDAJE;
    CURSOR CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        FOR RECS IN CUR_STUDENTI LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END VYPIS;
    
    PROCEDURE STRANKOVANY_VYPIS IS
    CURSOR  CUR_STUDENTI(VELKOST_STRANKY INTEGER) IS 
                SELECT * FROM ( 
                    SELECT ROW_NUMBER() OVER(ORDER BY ROD_CISLO) AS RN, MENO, PRIEZVISKO, ROD_CISLO
                    FROM OS_UDAJE
                    )
                WHERE RN BETWEEN ((C_CISLO_STRANKY - 1) * C_VELKOST_STRANKY) + 1 AND C_CISLO_STRANKY * C_VELKOST_STRANKY;
    CURSOR  CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        DBMS_OUTPUT.PUT_LINE('=== STRANKA ' || C_CISLO_STRANKY || ' ===');
        FOR RECS IN CUR_STUDENTI(C_VELKOST_STRANKY) LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END STRANKOVANY_VYPIS;
    
    PROCEDURE DALSIA_STRANKA IS
    BEGIN
        C_CISLO_STRANKY := C_CISLO_STRANKY + 1;
        STRANKOVANY_VYPIS;
    END DALSIA_STRANKA;
    
    PROCEDURE PREDCHADZAJUCA_STRANKA IS
    BEGIN
        IF C_CISLO_STRANKY > 1 THEN
            C_CISLO_STRANKY := C_CISLO_STRANKY - 1;
        END IF;
        STRANKOVANY_VYPIS;
    END PREDCHADZAJUCA_STRANKA;
END STUDENT_PACKAGE;
/

EXEC STUDENT_PACKAGE.STRANKOVANY_VYPIS;
EXEC STUDENT_PACKAGE.DALSIA_STRANKA;
EXEC STUDENT_PACKAGE.PREDCHADZAJUCA_STRANKA;
/

-- (c) DoplÚte definÌciu veækosti strany.

CREATE OR REPLACE PACKAGE STUDENT_PACKAGE AS
    PROCEDURE VYPIS;
    PROCEDURE STRANKOVANY_VYPIS(NOVA_VELKOST INTEGER DEFAULT 3);
    PROCEDURE DALSIA_STRANKA;
    PROCEDURE PREDCHADZAJUCA_STRANKA;
    C_CISLO_STRANKY INTEGER := 1;
    C_VELKOST_STRANKY INTEGER;
END STUDENT_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY STUDENT_PACKAGE AS
    PROCEDURE VYPIS IS
    CURSOR  CUR_STUDENTI IS 
                SELECT * FROM OS_UDAJE;
    CURSOR CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        FOR RECS IN CUR_STUDENTI LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END VYPIS;
    
    PROCEDURE STRANKOVANY_VYPIS(NOVA_VELKOST INTEGER DEFAULT 3) IS
    CURSOR  CUR_STUDENTI(VELKOST_STRANKY INTEGER) IS 
                SELECT * FROM ( 
                    SELECT ROW_NUMBER() OVER(ORDER BY ROD_CISLO) AS RN, MENO, PRIEZVISKO, ROD_CISLO
                    FROM OS_UDAJE
                    )
                WHERE RN BETWEEN ((C_CISLO_STRANKY - 1) * C_VELKOST_STRANKY) + 1 AND C_CISLO_STRANKY * C_VELKOST_STRANKY;
    CURSOR  CUR_KONTAKTY(RC RABEK2.OS_UDAJE.ROD_CISLO%TYPE) IS
                SELECT * FROM KONTAKTY
                WHERE RC = ROD_CISLO;
    BEGIN
        C_VELKOST_STRANKY := NOVA_VELKOST;
        DBMS_OUTPUT.PUT_LINE('=== STRANKA ' || C_CISLO_STRANKY || ' ===');
        FOR RECS IN CUR_STUDENTI(C_VELKOST_STRANKY) LOOP
            DBMS_OUTPUT.PUT_LINE(RECS.MENO || ' ' || RECS.PRIEZVISKO);
            FOR RECK IN CUR_KONTAKTY(RECS.ROD_CISLO) LOOP
                DBMS_OUTPUT.PUT_LINE('  ' || RECK.POPIS || ': ' || RECK.KONTAKT);
            END LOOP;
        END LOOP;
    END STRANKOVANY_VYPIS;
    
    PROCEDURE DALSIA_STRANKA IS
    BEGIN
        C_CISLO_STRANKY := C_CISLO_STRANKY + 1;
        STRANKOVANY_VYPIS(C_VELKOST_STRANKY);
    END DALSIA_STRANKA;
    
    PROCEDURE PREDCHADZAJUCA_STRANKA IS
    BEGIN
        IF C_CISLO_STRANKY > 1 THEN
            C_CISLO_STRANKY := C_CISLO_STRANKY - 1;
        END IF;
        STRANKOVANY_VYPIS(C_VELKOST_STRANKY);
    END PREDCHADZAJUCA_STRANKA;
END STUDENT_PACKAGE;
/

EXEC STUDENT_PACKAGE.STRANKOVANY_VYPIS(5);
EXEC STUDENT_PACKAGE.DALSIA_STRANKA;
EXEC STUDENT_PACKAGE.PREDCHADZAJUCA_STRANKA;

-- 3.3 NOT IN
-- Cieæom tejto ˙lohy je jednak odhaliù problÈm pri pouûitÌ NOT IN a z·roveÚ si 
-- precviËiù agregaËnÈ funkcie.
-- (a) Vytvorte kÛpiu tabuæky kontakty pomocou prÌkazu Select

CREATE TABLE KONTAKT2 AS SELECT * FROM KONTAKTY;

-- (b) ZmeÚte povinnosù atrib˙tu rod_cislo v tabuæke kontakt2 na nepovinnÈ

DESC KONTAKT2;

ALTER TABLE KONTAKT2
MODIFY ROD_CISLO CHAR(11) NULL;

-- (c) Do tabuæky kontakt2 vloûte dva riadky bez udania rodnÈho ËÌsla

INSERT INTO KONTAKT2 VALUES (5, NULL, 'Mobil', '0906364784');
INSERT INTO KONTAKT2 VALUES (5, NULL, 'Mobil', '0948358494');

-- (d) VypÌöte poËet osÙb (z tabuæky os_udaje)

SELECT COUNT(DISTINCT ROD_CISLO) FROM OS_UDAJE;

-- (e) VypÌöte poËet kontaktov (z tabuæky kontakt2)

SELECT COUNT(*) FROM KONTAKTY;

-- (f) VypÌöte poËet rÙznych rodn˝ch ËÌsel v tabuæke kontakt2

SELECT COUNT(DISTINCT ROD_CISLO) FROM KONTAKT2;

-- (g) VypÌöte poËet ötudentov, ktorÌ maj˙ nejak˝ kontakt (ak maj˙ viac 
-- kontaktov, poËÌtajte ho iba raz)

SELECT COUNT(DISTINCT ROD_CISLO) FROM OS_UDAJE JOIN KONTAKTY USING (ROD_CISLO);

-- (h) VypÌöte poËet ötudentov, ktorÌ nemaj˙ ûiaden kontakt

SELECT COUNT(DISTINCT ROD_CISLO) FROM OS_UDAJE
WHERE ROD_CISLO NOT IN (SELECT ROD_CISLO FROM KONTAKTY);

